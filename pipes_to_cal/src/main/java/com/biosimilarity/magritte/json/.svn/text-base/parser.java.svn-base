
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri May 30 02:36:47 PDT 2008
//----------------------------------------------------

package com.biosimilarity.magritte.json;


/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri May 30 02:36:47 PDT 2008
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\021\000\002\002\004\000\002\002\005\000\002\003" +
    "\005\000\002\004\005\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\006\002\000\002" +
    "\006\003\000\002\006\005\000\002\007\002\000\002\007" +
    "\003\000\002\007\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\031\000\004\004\004\001\002\000\006\005\ufff6\015" +
    "\007\001\002\000\004\002\006\001\002\000\004\002\001" +
    "\001\002\000\004\006\015\001\002\000\004\005\014\001" +
    "\002\000\006\005\ufff5\011\012\001\002\000\006\005\ufff6" +
    "\015\007\001\002\000\004\005\ufff4\001\002\000\012\002" +
    "\000\005\000\010\000\011\000\001\002\000\020\004\004" +
    "\007\022\012\020\013\017\014\016\015\024\016\026\001" +
    "\002\000\010\005\ufff9\010\ufff9\011\ufff9\001\002\000\010" +
    "\005\ufff7\010\ufff7\011\ufff7\001\002\000\010\005\ufff8\010" +
    "\ufff8\011\ufff8\001\002\000\010\005\ufffa\010\ufffa\011\ufffa" +
    "\001\002\000\022\004\004\007\022\010\ufff3\012\020\013" +
    "\017\014\016\015\024\016\026\001\002\000\006\005\uffff" +
    "\011\uffff\001\002\000\010\005\ufffd\010\ufffd\011\ufffd\001" +
    "\002\000\010\005\ufffb\010\ufffb\011\ufffb\001\002\000\010" +
    "\005\ufffc\010\ufffc\011\ufffc\001\002\000\006\010\ufff2\011" +
    "\032\001\002\000\004\010\031\001\002\000\010\005\ufffe" +
    "\010\ufffe\011\ufffe\001\002\000\022\004\004\007\022\010" +
    "\ufff3\012\020\013\017\014\016\015\024\016\026\001\002" +
    "\000\004\010\ufff1\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\031\000\004\002\004\001\001\000\006\003\010\006" +
    "\007\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\010\006\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\002\024\004\020\005\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\002\024\004\020\005\026\007\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\002\024\004\020\005\026\007\032\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public com.biosimilarity.magritte.json.Absyn.JSONObject pJSONObject() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (com.biosimilarity.magritte.json.Absyn.JSONObject) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ListJSONValue ::= JSONValue _SYMB_5 ListJSONValue 
            {
              com.biosimilarity.magritte.json.Absyn.ListJSONValue RESULT =null;
		com.biosimilarity.magritte.json.Absyn.JSONValue p_1 = (com.biosimilarity.magritte.json.Absyn.JSONValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.magritte.json.Absyn.ListJSONValue p_3 = (com.biosimilarity.magritte.json.Absyn.ListJSONValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListJSONValue",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ListJSONValue ::= JSONValue 
            {
              com.biosimilarity.magritte.json.Absyn.ListJSONValue RESULT =null;
		com.biosimilarity.magritte.json.Absyn.JSONValue p_1 = (com.biosimilarity.magritte.json.Absyn.JSONValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.magritte.json.Absyn.ListJSONValue(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListJSONValue",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ListJSONValue ::= 
            {
              com.biosimilarity.magritte.json.Absyn.ListJSONValue RESULT =null;
		 RESULT = new com.biosimilarity.magritte.json.Absyn.ListJSONValue(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListJSONValue",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ListJSONPair ::= JSONPair _SYMB_5 ListJSONPair 
            {
              com.biosimilarity.magritte.json.Absyn.ListJSONPair RESULT =null;
		com.biosimilarity.magritte.json.Absyn.JSONPair p_1 = (com.biosimilarity.magritte.json.Absyn.JSONPair)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.magritte.json.Absyn.ListJSONPair p_3 = (com.biosimilarity.magritte.json.Absyn.ListJSONPair)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListJSONPair",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ListJSONPair ::= JSONPair 
            {
              com.biosimilarity.magritte.json.Absyn.ListJSONPair RESULT =null;
		com.biosimilarity.magritte.json.Absyn.JSONPair p_1 = (com.biosimilarity.magritte.json.Absyn.JSONPair)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.magritte.json.Absyn.ListJSONPair(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListJSONPair",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ListJSONPair ::= 
            {
              com.biosimilarity.magritte.json.Absyn.ListJSONPair RESULT =null;
		 RESULT = new com.biosimilarity.magritte.json.Absyn.ListJSONPair(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListJSONPair",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // JSONValue ::= _SYMB_7 
            {
              com.biosimilarity.magritte.json.Absyn.JSONValue RESULT =null;
		 RESULT = new com.biosimilarity.magritte.json.Absyn.JNul(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JSONValue",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // JSONValue ::= _SYMB_6 
            {
              com.biosimilarity.magritte.json.Absyn.JSONValue RESULT =null;
		 RESULT = new com.biosimilarity.magritte.json.Absyn.JFal(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JSONValue",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // JSONValue ::= _SYMB_8 
            {
              com.biosimilarity.magritte.json.Absyn.JSONValue RESULT =null;
		 RESULT = new com.biosimilarity.magritte.json.Absyn.JTru(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JSONValue",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // JSONValue ::= JSONArray 
            {
              com.biosimilarity.magritte.json.Absyn.JSONValue RESULT =null;
		com.biosimilarity.magritte.json.Absyn.JSONArray p_1 = (com.biosimilarity.magritte.json.Absyn.JSONArray)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.magritte.json.Absyn.JArr(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JSONValue",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // JSONValue ::= JSONObject 
            {
              com.biosimilarity.magritte.json.Absyn.JSONValue RESULT =null;
		com.biosimilarity.magritte.json.Absyn.JSONObject p_1 = (com.biosimilarity.magritte.json.Absyn.JSONObject)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.magritte.json.Absyn.JObj(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JSONValue",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // JSONValue ::= _DOUBLE_ 
            {
              com.biosimilarity.magritte.json.Absyn.JSONValue RESULT =null;
		Double p_1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.magritte.json.Absyn.JNum(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JSONValue",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // JSONValue ::= _STRING_ 
            {
              com.biosimilarity.magritte.json.Absyn.JSONValue RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.magritte.json.Absyn.JStr(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JSONValue",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // JSONArray ::= _SYMB_3 ListJSONValue _SYMB_4 
            {
              com.biosimilarity.magritte.json.Absyn.JSONArray RESULT =null;
		com.biosimilarity.magritte.json.Absyn.ListJSONValue p_2 = (com.biosimilarity.magritte.json.Absyn.ListJSONValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.magritte.json.Absyn.JArray(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JSONArray",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // JSONPair ::= _STRING_ _SYMB_2 JSONValue 
            {
              com.biosimilarity.magritte.json.Absyn.JSONPair RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.magritte.json.Absyn.JSONValue p_3 = (com.biosimilarity.magritte.json.Absyn.JSONValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.magritte.json.Absyn.JPair(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JSONPair",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // JSONObject ::= _SYMB_0 ListJSONPair _SYMB_1 
            {
              com.biosimilarity.magritte.json.Absyn.JSONObject RESULT =null;
		com.biosimilarity.magritte.json.Absyn.ListJSONPair p_2 = (com.biosimilarity.magritte.json.Absyn.ListJSONPair)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.magritte.json.Absyn.JObject(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JSONObject",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= JSONObject EOF 
            {
              Object RESULT =null;
		com.biosimilarity.magritte.json.Absyn.JSONObject start_val = (com.biosimilarity.magritte.json.Absyn.JSONObject)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

