/*
 * Copyright (c) 2007 BUSINESS OBJECTS SOFTWARE LIMITED
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 *     * Neither the name of Business Objects nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * BlockingQueue.cal
 * Creation date: Spet 18, 2007
 */

/**
 * This module defines a fixed length blocking queue, that can be used in 
 * conjunction with the {@link module = "Cal.Experimental.Concurrent.Parallel"@} 
 * module to pass items between threads.
 * 
 * CAL must be started with the system property
 * org.openquark.cal.machine.lecc.concurrent_runtime for concurrent use.
 * 
 * @author Magnus Byne
 */
module Cal.Experimental.Concurrent.BlockingQueue;

import Cal.Core.Prelude using
    typeClass = Inputable, Outputable;
    typeConstructor =
        Double, Int, String, CalFunction, JObject, CalValue, Boolean;
    function =
        fromInt, seq, eager, add, stringToInt, input, output, toCalValue,
        unsafeFromCalValue, upFromTo, makeCalFunction, unsafeCoerce;
    ;

data foreign unsafe import jvm "java.util.concurrent.ArrayBlockingQueue" 
    private JBlockingQueue;

foreign unsafe import jvm "constructor" 
    private jmakeQueue :: Int -> JBlockingQueue;

foreign unsafe import jvm "method put" 
    private jput :: JBlockingQueue -> JObject -> ();

foreign unsafe import jvm "method take" 
    private jtake :: JBlockingQueue -> JObject;

/**
 * A blocking queue has a predefined size. When it reaches 
 * this size, an attempt to put more items will block.
 */
data public BlockingQueue a = 
    private BlockingQueue jqueue :: !JBlockingQueue;

/**
 * This creates a blocking queue that can hold at most size elements.
 * If you attempt to put elements into the queue when it is full
 * the put will block.
 * 
 * @arg maxSize the maximum size of the queue 
 */
makeBlockingQueue :: Int -> BlockingQueue a;
public makeBlockingQueue !maxSize = 
    BlockingQueue (jmakeQueue maxSize);

/**
 * Put an element on the queue. If the queue already contains size elements
 * this function will block until another thread removes an item from the queue
 * 
 * @arg queue the queue to add to
 * @arg item the item to add
 */
put :: BlockingQueue a -> a -> ();
public put !queue item =
    jput queue.BlockingQueue.jqueue (output $ toCalValue item);

/**
 * Takes an item from a queue. If the queue is empty this function will block
 * until an item is inserted by another thread.
 * 
 * @arg queue the queue to take an item from.
 */
take :: BlockingQueue a -> a;
public take !queue =
    unsafeFromCalValue $ input $ jtake queue.BlockingQueue.jqueue;
