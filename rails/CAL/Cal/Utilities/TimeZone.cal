/*
 * Copyright (c) 2007 BUSINESS OBJECTS SOFTWARE LIMITED
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *  
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *  
 *     * Neither the name of Business Objects nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 *  
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */


/*
 * TimeZone.cal
 * Creation date: May 31, 2006.
 * By: Joseph Wong
 */

/**
 * Defines the {@link typeConstructor=TimeZone@} type and its affiliated operations.
 * 
 * @author Rick Cameron
 * @author Joseph Wong
 */
module Cal.Utilities.TimeZone;

import Cal.Core.Prelude using
    typeConstructor = String;
    typeClass = Eq;
    ;

import Cal.Utilities.Locale using
    typeConstructor = Locale;
    ;

import Cal.Core.System using
    function = executionContextProperties;
    typeConstructor = ExecutionContextProperties;
    ;

import Cal.Core.Debug using
    typeClass = Show;
    ;

/**
 * Represents a time zone.
 */
data foreign unsafe import jvm public "org.openquark.util.time.TimeZone"
    public TimeZone deriving Eq, Show;

/**
 * Java's own time zone class.
 */
data foreign unsafe import jvm private "java.util.TimeZone"
    private JavaUtilTimeZone deriving Eq, Show;

/**
 * Returns the Java time zone's ID.
 * @arg javaUtilTimeZone the time zone.
 * @return the time zone ID.
 */
foreign unsafe import jvm "method getID"
    private jGetJavaUtilTimeZoneID :: JavaUtilTimeZone -> String;

/**
 * Converts a Java time zone to an immutable time zone.
 * @arg javaUtilTimeZone the time zone.
 * @return the corresponding immutable time zone.
 */
fromJavaUtilTimeZone :: JavaUtilTimeZone -> TimeZone;
private fromJavaUtilTimeZone !javaUtilTimeZone = makeTimeZone $ jGetJavaUtilTimeZoneID javaUtilTimeZone;

/**
 * Constructs a time zone from a time zone ID.
 * 
 * Time zone IDs can be of the form:
 * {@code
 * GMT[+|-]hh[[:]mm]
 * @}
 * or can be one of the well known time zones such as "America/Los_Angeles".
 * 
 * @arg id the time zone ID.
 * @return the corresponding time zone.
 */
foreign unsafe import jvm "static method org.openquark.util.time.TimeZone.getInstance"
    public makeTimeZone :: String -> TimeZone;

/**
 * The UTC time zone.
 */
foreign unsafe import jvm "static method org.openquark.util.time.TimeZone.utc"
    public utcTimeZone :: TimeZone;

/**
 * Returns the time zone defined in the given set of properties of an execution context.
 * 
 * @arg executionContextProperties the set of system properties.
 * @return the time zone defined in the system properties.
 */
foreign unsafe import jvm "method getTimeZone"
    private jGetTimeZone :: ExecutionContextProperties -> JavaUtilTimeZone;

/**
 * Returns the time zone associated with the current execution context. This is a constant for
 * a particular execution context.
 * 
 * @return the time zone associated with the current execution context.
 */
currentTimeZone :: TimeZone;
public currentTimeZone = fromJavaUtilTimeZone $ jGetTimeZone executionContextProperties;

/**
 * Returns the time zone ID of the given time zone.
 * 
 * @arg timeZone the time zone.
 * @return the time zone ID.
 */
foreign unsafe import jvm "method getID"
    public timeZoneID :: TimeZone -> String;

/**
 * Returns the short display name of the time zone in the given locale.
 * 
 * @arg timeZone the time zone.
 * @arg locale the locale in which the name should be localized.
 * @return the short display name.
 */
foreign unsafe import jvm "method getShortDisplayName"
    public shortDisplayName :: TimeZone -> Locale -> String;

/**
 * Returns the long display name of the time zone in the given locale.
 * 
 * @arg timeZone the time zone.
 * @arg locale the locale in which the name should be localized.
 * @return the long display name.
 */
foreign unsafe import jvm "method getLongDisplayName"
    public longDisplayName :: TimeZone -> Locale -> String;
