/*
 * Copyright (c) 2007 BUSINESS OBJECTS SOFTWARE LIMITED
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *  
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *  
 *     * Neither the name of Business Objects nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 *  
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */


/*
 * ValueType.cal
 * Creation date: Oct 18, 2004.
 * By: Richard Webster
 */

/**
 * This module defines an enumeration to represent several common types.
 * 
 * The types currently represented are:
 * {@unorderedList
 * {@item null@}
 * {@item string@}
 * {@item int@}
 * {@item double@}
 * {@item Boolean@}
 * {@item time@}
 * {@item binary (i.e. array of bytes)@}
 * @}
 * 
 * {@strong NB:@} There is a Java type-safe enumeration {@code JValueType@} that must be kept in synch with {@link typeConstructor = ValueType@}.
 * 
 * @author Richard Webster
 */
    
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

module Cal.Utilities.ValueType;

import Cal.Core.Prelude using
    typeConstructor = Boolean, Byte, Either, Int, String, TypeRep;
    dataConstructor = False, True;
    function = error, typeOf;
    ;
import Cal.Collections.List using
    function = lookupWithDefault;
    ;
import Cal.Utilities.XmlBuilder using
    typeClass =
        XmlAttributeInputable, XmlAttributeOutputable, XmlInputable, 
        XmlOutputable;
    typeConstructor = XmlAttribute, XmlNode;
    function = toXmlAttribute;
    ;
import Cal.Collections.Array using
    typeConstructor = Array;
    ;
import Cal.Utilities.Time using
    typeConstructor = Time;
    ;
import Cal.Core.Debug;  


// @@@begin ValueType.ValueType saved Mon May 10 12:23:44 PDT 2004.
// Warning: this section may be automatically regenerated by the GemCutter.
// Created by Enumeration Factory for type: ValueType
data public ValueType = 
    public NullType | 
    public StringType | 
    public IntType | 
    public DoubleType | 
    public BooleanType | 
    public TimeType | 
    public BinaryType 
    deriving Prelude.Eq, Prelude.Ord, Prelude.Bounded;

intToValueType :: Int -> ValueType;
private intToValueType !index =
    case index of
    0 -> NullType;
    1 -> StringType;
    2 -> IntType;
    3 -> DoubleType;
    4 -> BooleanType;
    5 -> TimeType;
    6 -> BinaryType;
    _ -> Prelude.error "The index is out of range." ;
    ;

valueTypeToInt :: ValueType -> Int;
private valueTypeToInt !x =
    case x of
    NullType -> 0;
    StringType -> 1;
    IntType -> 2;
    DoubleType -> 3;
    BooleanType -> 4;
    TimeType -> 5;
    BinaryType -> 6;
    ;

// @@@end ValueType.ValueType


// Make the ValueType enum inputable.
data foreign unsafe import jvm public "org.openquark.util.datadictionary.ValueType" public JValueType deriving Prelude.Inputable;

foreign unsafe import jvm "method value" private jValueTypeToInt :: JValueType -> Int;


// Note: make sure to update the ValueType Java type-safe enum when the enum is changed...
instance Prelude.Inputable ValueType where
    input = inputValueType;
    ;

inputValueType :: Prelude.JObject -> ValueType;
private inputValueType valueType = 
    let
        intVal = jValueTypeToInt (Prelude.input valueType);
    in
        intToValueType intVal;


// Make the ValueType enum outputable.
foreign unsafe import jvm "static method org.openquark.util.datadictionary.ValueType.fromInt" private jIntToJValue :: Int -> JValueType;
foreign unsafe import jvm "static method org.openquark.util.datadictionary.ValueType.fromInt" private jIntToJValueObject :: Int -> Prelude.JObject;

// Note: make sure to update the ValueType Java type-safe enum when the enum is changed...
instance Prelude.Outputable ValueType where
    output = outputValueTypeToJObject;
    ;

outputValueTypeToJObject :: ValueType -> Prelude.JObject;
private outputValueTypeToJObject !valueType = 
    jIntToJValueObject (valueTypeToInt valueType);

outputValueType :: ValueType -> JValueType;
public outputValueType !valueType = 
    jIntToJValue (valueTypeToInt valueType);


// Make ValueType showable.
instance Debug.Show ValueType where
    show = showValueType;
    ;

private showValueType !x = 
    case x of
    NullType -> "null";
    StringType -> "string";
    IntType -> "int";
    DoubleType -> "double";
    BooleanType -> "boolean";
    TimeType -> "time";
    BinaryType -> "binary";
    ;


/**
 * Returns whether the type is one of the numeric types.
 */
isNumericType :: ValueType -> Boolean;
public isNumericType valueType = 
    case valueType of
    IntType -> True;
    DoubleType -> True;
    _ -> False;
    ;

/**
 * Returns the value type corresponding to the specified type rep.
 * NullType is returned if there is no value type for the type rep.
 */
fromTypeRep :: TypeRep -> ValueType;
public fromTypeRep !typeRep = 
    let
        timeTypeRep :: TypeRep;
        timeTypeRep = typeOf (error "unspecified value" :: Time);

        binaryTypeRep :: TypeRep;
        binaryTypeRep = typeOf (error "unspecified value" :: Array Byte);
    in
        if (Prelude.isStringType typeRep) then StringType
        else if (Prelude.isIntType typeRep) then IntType
        else if (Prelude.isDoubleType typeRep) then DoubleType
        else if (Prelude.isBooleanType typeRep) then BooleanType
        else if (typeRep == timeTypeRep) then TimeType
        else if (typeRep == binaryTypeRep) then BinaryType
        else NullType;


/**
 * Allow ValueTypes to be serialized to XML.
 */
instance XmlAttributeInputable ValueType where
    fromXmlAttribute = inputValueTypeXmlAttribute;
    ;

instance XmlInputable ValueType where
    fromXml = inputValueTypeXml;
    ;
    
inputValueTypeXml :: (Either XmlAttribute XmlNode) -> ValueType;
private inputValueTypeXml attributeOrNode =
    XmlBuilder.inputFromXmlAttributeInputable attributeOrNode;

inputValueTypeXmlAttribute :: XmlAttribute -> ValueType;
private inputValueTypeXmlAttribute attribute =
     nameToValueType (XmlBuilder.attributeValue attribute);


instance XmlAttributeOutputable ValueType where
    toXmlAttribute = outputValueTypeXmlAttribute;
    ;

instance XmlOutputable ValueType where
    toXml = outputValueTypeXml;
    ;
    
outputValueTypeXml :: String -> ValueType -> (Either XmlAttribute XmlNode);
private outputValueTypeXml name value =
    XmlBuilder.outputFromXmlAttributeOutputable name value;

outputValueTypeXmlAttribute :: String -> ValueType -> XmlAttribute;
private outputValueTypeXmlAttribute attrName valueType =
     toXmlAttribute attrName (showValueType valueType);

private nameToValueType vtName = 
    let
        vtNameMap = [("null", NullType), 
                     ("string", StringType), 
                     ("int", IntType), 
                     ("double", DoubleType), 
                     ("boolean", BooleanType), 
                     ("time", TimeType), 
                     ("binary", BinaryType)];
    in
        lookupWithDefault vtName vtNameMap NullType;
