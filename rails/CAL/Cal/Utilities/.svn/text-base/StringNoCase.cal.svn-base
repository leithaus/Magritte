/*
 * Copyright (c) 2007 BUSINESS OBJECTS SOFTWARE LIMITED
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *  
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *  
 *     * Neither the name of Business Objects nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 *  
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */


/*
 * StringNoCase.cal
 * Created: Nov 8, 2005
 * By: Bo Ilic
 */

/**
 * Defines {@link typeConstructor = StringNoCase@}, a case-insensitive string type and a variety of useful operations
 * and class instances for it.
 * 
 * {@link typeConstructor = StringNoCase@} is mainly intended to allow the use of {@link typeConstructor = String@}s in case-insensitive ways for keys in maps etc.
 * In general, very few functions are available for {@link typeConstructor = StringNoCase@} since we can efficiently just convert to a {@link typeConstructor = String@} and use
 * the {@link typeConstructor = String@} functions. However, a few additional functions would be useful here.
 * 
 * @author Bo Ilic
 */
module Cal.Utilities.StringNoCase;
import Cal.Core.Prelude using
    typeClass = Appendable, Eq, Inputable, Ord, Outputable;
    typeConstructor = Boolean, Int, Ordering, String;
    function = append, concat, empty, isEmpty, unsafeCoerce;
    ;
import Cal.Core.Debug using
    typeClass = Show;
    function = show;
    ;
import Cal.Core.String;

/**
 * A case-insensitive string type. Note that although comparison and equality operators on {@link typeConstructor = StringNoCase@} are case-insensitive,
 * {@link typeConstructor = StringNoCase@} values preserve the case of the underlying {@link typeConstructor = String@} whenever possible e.g. the concatenation of 2 case-insensitive
 * strings will have as its underlying string value the concatentation of the 2 underlying strings.
 */
data foreign unsafe import jvm private "java.lang.String"
    public StringNoCase deriving Inputable, Outputable;

/**
 * Converts a {@link typeConstructor = String@} value to a {@link typeConstructor = StringNoCase@} value.
 * 
 * @arg stringValue the {@code String@} value to be converted.
 * @return the corresponding {@code StringNoCase@} value.
 */
foreign unsafe import jvm "cast" 
    public fromString :: String -> StringNoCase;

/**
 * Converts a {@link typeConstructor = StringNoCase@} value to a {@link typeConstructor = String@} value.
 * 
 * @arg stringNoCaseValue the {@code StringNoCase@} value to be converted.
 * @return the corresponding {@code String@} value.
 */
foreign unsafe import jvm "cast" 
    public toString :: StringNoCase -> String;

//implementation note: see comment for Prelude.compareInt
compareStringNoCase :: StringNoCase -> StringNoCase -> Ordering;
private compareStringNoCase !string1 !string2 =
    String.compareIgnoreCase (toString string1) (toString string2);   

/**
 * @return -1 for LT, 0 for EQ, 1 for GT
 */    
foreign unsafe import jvm "method compareToIgnoreCase"
    private jCompareStringNoCase :: StringNoCase -> StringNoCase -> Int;


instance Eq StringNoCase where
    equals = equalsStringNoCase;
    notEquals = notEqualsStringNoCase;
    ;

equalsStringNoCase :: StringNoCase -> StringNoCase -> Boolean;
private equalsStringNoCase !string1 !string2 = jCompareStringNoCase string1 string2 == 0;

notEqualsStringNoCase :: StringNoCase -> StringNoCase -> Boolean;
private notEqualsStringNoCase !string1 !string2 = jCompareStringNoCase string1 string2 != 0;

instance Ord StringNoCase where
    lessThan = lessThanStringNoCase;
    lessThanEquals = lessThanEqualsStringNoCase;
    greaterThanEquals = greaterThanEqualsStringNoCase;
    greaterThan = greaterThanStringNoCase;
    compare = compareStringNoCase;
    max = maxStringNoCase;
    min = minStringNoCase;
    ; 

lessThanStringNoCase :: StringNoCase -> StringNoCase -> Boolean;
private lessThanStringNoCase !string1 !string2 = jCompareStringNoCase string1 string2 < 0;

lessThanEqualsStringNoCase :: StringNoCase -> StringNoCase -> Boolean;
private lessThanEqualsStringNoCase !string1 !string2 = jCompareStringNoCase string1 string2 <= 0;

greaterThanEqualsStringNoCase :: StringNoCase -> StringNoCase -> Boolean;
private greaterThanEqualsStringNoCase !string1 !string2 = jCompareStringNoCase string1 string2 >= 0;

greaterThanStringNoCase :: StringNoCase -> StringNoCase -> Boolean;
private greaterThanStringNoCase !string1 !string2 = jCompareStringNoCase string1 string2 > 0;

maxStringNoCase :: StringNoCase -> StringNoCase -> StringNoCase;
private maxStringNoCase !string1 !string2 = if string1 <= string2 then string2 else string1;

minStringNoCase :: StringNoCase -> StringNoCase -> StringNoCase;
private minStringNoCase !string1 !string2 = if string1 <= string2 then string1 else string2; 


instance Appendable StringNoCase where 
    empty = emptyStringNoCase;  
    isEmpty = isEmptyStringNoCase;
    append = appendStringNoCase;
    concat = concatStringNoCase;
    ;   

emptyStringNoCase :: StringNoCase;    
emptyStringNoCase = fromString (empty :: String);   

isEmptyStringNoCase :: StringNoCase -> Boolean;
isEmptyStringNoCase !string = isEmpty (toString string);

appendStringNoCase :: StringNoCase -> StringNoCase -> StringNoCase;
appendStringNoCase !string1 !string2 = fromString ((toString string1) ++ (toString string2));

concatStringNoCase :: [StringNoCase] -> StringNoCase;
concatStringNoCase = unsafeCoerce (concat :: [String] -> String);

instance Show StringNoCase where
    show = showStringNoCase;
    ;
    
showStringNoCase :: StringNoCase -> String;
private showStringNoCase !x = 
    show (toString x);
    
