/*
 * Copyright (c) 2007 BUSINESS OBJECTS SOFTWARE LIMITED
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *  
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *  
 *     * Neither the name of Business Objects nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 *  
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */


/*
 * Memoize.cal
 * Created: Dec 13, 2005
 * By: Raymond Cypher
 */

/**
 * Implementation of memoization: based on the paper 'Disposable Memo Functions' by Cook and Launchbury.
 * A memo-function remembers the arguments to which it has been applied, together with the result.  
 * If applied to a repeated argument, memo functions return the cached answer rather than recomputing
 * it from scratch.  Memoization improves the time complexity of algorithms with repeated 
 * computations, but at the cost of higher memory use.
 * 
 * The key idea in this module is to provide a function: {@code memo :: (Ord a) => (a -> b) -> (a -> b); @}
 * When applied to a function {@link memo@} returns an equivalent memoized function.  When  all
 * references to this new function have been dropped the cached values will be discarded.
 *   
 * @author Raymond Cypher 
 */
module Cal.Core.Memoize;

import Cal.Core.Prelude using
    typeClass = Ord;
    typeConstructor = CalValue;
    function = unsafeCoerce;
    ;

import Cal.Collections.Map;

/** 
 * This is the type of the actual cache object. 
 * Essentially it is a foreign type which holds on to an {@link CalValue@}.  The held
 * {@link CalValue@} will be the current Map of parameter value to result. 
 */
data foreign unsafe import jvm "org.openquark.cal.internal.foreignsupport.module.Memoize.MemoCache"
    public MemoCache;

/**
 * Constructor for the foreign type {@link MemoCache@}.  It takes an {@link CalValue@} which will be an instance of
 * {@link Map.Map@}.
 */
foreign unsafe import jvm "constructor"
    newMemoCache :: CalValue -> MemoCache;

/**
 * Retrieve the current result map from the {@link MemoCache@}.
 */
foreign unsafe import jvm "method getMap"
    memoCache_getMap :: MemoCache -> CalValue;

/**
 * Set the current result map into the {@link MemoCache@}.
 */
foreign unsafe import jvm "method setMap"
    memoCache_setMap :: MemoCache -> CalValue -> ();



/**
 * Access the cache using the argument value.
 * If a result is already cached return it.
 * If no result is cached create a new result, add it to the cache, and return it.
 * 
 * @arg functionCachePair a tuple containing the memoized function and the associated cache.
 * @arg argument the argument to the memoized function.
 * @return a cached result of applying the memoized function to the argument
 */
access :: (Ord a) => ((a -> b), MemoCache) -> a -> b;
access functionCachePair argument = 
    case functionCachePair of 
    (fctn, cache) -> 
        let
            map :: CalValue;
            map = memoCache_getMap cache;
            
            existing :: Prelude.Maybe a;
            existing = Map.lookup argument (Prelude.unsafeCoerce map);
        in
            case existing of
            Prelude.Nothing ->
                // There is no previously cached result.  We create a new result, which is just the application
                // of the memoized function to the argument.  We add the new result to the cache and return the new 
                // result.
                let 
                    newResult = (fctn argument);
                    // Remember to update the reference in the MemoCache to the new Map created by the insertion.
                    updateCache :: ();
                    updateCache = memoCache_setMap cache (unsafeCoerce (Map.insert argument newResult (unsafeCoerce map))); 
                in 
                    Prelude.seq updateCache newResult;
                
            Prelude.Just result ->
                // There was a previously calculated result in the cache.  Simply return it.
                result;
            ;
    ; 
    
/**
* Creates a memoizing version of a function.
* This new function will cache/retrieve results in a {@code MemoCache@}
* using the argument value as a key. 
* The type of the key must be an instance of {@link Prelude.Ord@}.
* 
* Note: memoization applies to functions of type {@code (a -> b)@} so applying
* this to a supercombinator of arity > 1 will generate a cache that
* caches function instances.  Not a cache that caches results ignoring
* some of the function arguments.  See {@link "Cal.Test.Core.Memoize_Tests.memoizedVersionOfFourParam"@} for the pattern to use
* when memoizing a multi argument supercombinator.
* 
* @arg f the function to be memoized.
* @return a memoizing version of {@code f@}.
*/
memo :: (Ord a) => (a -> b) -> (a -> b);
public memo f = 
    let
        tuple = (f, newMemoCache (unsafeCoerce Map.empty));
    in
        (\x -> access tuple x);
    
